________________________________________________________________________________

||||||||||||||||||||||||| CALCULATING TURNS FOR 1 PATH |||||||||||||||||||||||||

To calculate the moves one path takes:
ants + the rooms between source and sink OR
ants + the number of edges minus 1

	Example1:

			ANTS: 7
				source
				|
				room1
				|
				room2
				|
				room3
				|
				sink

				There are 3 rooms between the source and the sink, and 7 ants.
				3 + 7 = 10.
				Here it takes 10 moves.

				OR

				There are 4 edges(links) and 7 ants.
				Add them together and substract 1.
				4 + 7 - 1 = 10.
				10 moves again.

	Example2:

			ANTS: 12
				source
				|
				room1
				|
				room2
				|
				room3
				|
				room4
				|
				room5
				|
				sink

				There are 5 rooms between the source and the sink, and 12 ants.
				5 + 12 = 17.
				Here it takes 17 moves.

				OR

				There are 6 edges(links) and 12 ants.
				Add them together and substract 1.
				6 + 12 - 1 = 17.
				17 moves again.

________________________________________________________________________________


|||||||||||||||||||||||||||||| MAXIMUM PATHS = 2 |||||||||||||||||||||||||||||||

If the maximum paths is 2, wether to use 1 or 2 paths can be calculated.
The difference between the number of edges of the two paths is the magic number.
That number is the highest amount of ants when to use 1 path.

	Example1:

			Path1: 8 edges
			Path2: 13 edges
			Difference: 5.

						Number of turns it takes with:
				ANTS:	PATH1:	USING BOTH PATHS(1 ant in Path2):
				7		14			13
				6		13			13
				5		12			13

		With 7 ants it's better to use both paths as it takes 13 turns,
		where just using the shortest path takes 14 turns.

		With 6 ants it doesn't matter which on to choose - path1 or both.

		With 5 ants - which is the difference between the number of edges,
		It is better to use the shortest path only, as it takes less turns.


How it could look like in the code:

if (paths->max == 2)
{
	If (data->ants > (paths->path2->edge_nb) - (paths->path1->edge_nb))
		use_two_paths(data, paths);
	else
		use_shortest_path(data, paths);
}

Calculating how many ants go to the two paths:

void	use_two_paths(t_data *data, t_path paths)
{
	int		ants_in_path1;
	int		ants_in_path2;

	ants_in_path2 = (data->ants - Diff) / 2;
	ants_in_path1 = data->ants - ants_in_path2;
	print_the_solution;
}


________________________________________________________________________________


|||||||||||||||||||||||||||| WHEN TO ADD PATH3 |||||||||||||||||||||||||||||||||

The third path is added when the number of ants reaches the equation:
	Ants = Diff1 + 3 + (Diff2 x 2),
	Where Diff1 = (Path2->edges - Path1->edges), and
	Diff2 = (Path3->edges - Path2->edges).

Example1:

			Path1: 8 edges
			Path2: 13 edges
			Path3: 14 edges
			Difference1 = 5 (Path2 - Path1).
			Difference2 = 1 (Path3 - Path2).

						Number of turns it takes with:
				ANTS:	USING 2 PATHS:		USING 3 PATHS:
				7			13					14
				8			14					14
				9			14					14
				10			15					14

		With 10 ants it's better to use 3 paths instead of 2.
		Now let's check the calculation:
		Ants = Diff1 + 3 + (Diff2 x 2) =
		Ants =   5   + 3 + (  1   x 2) =
		Ants =      8    + (    2    ) =
		Ants = 10.


________________________________________________________________________________

||| TEMPORARY STUFF HERE!! |||||| |||||||     ||||||||||
|||||||||||   JUST TO SAVE THE STUFF WE DISCUSSED ABOUT VERIFYING COORDS |||||||

typedef struct s_coords
{
	char		*name;
	int			coord1;
	int			coord2;
	t_coords	next;
}				t_coords;

temp = start_coords;
while(temp != NULL)
{
	if (ft_strequ(coords->name, temp->name) || (coords->coord1 == temp->coord1 && coords->coord2 == temp->coord2))
		error;
	temp = temp->next;
}
temp->next = coords;

________________________________________________________________________________

